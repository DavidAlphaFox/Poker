//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameAPIWrap
{
    public static void Register(LuaState L)
    {
        L.BeginStaticLibs("GameAPI");
        L.RegFunction("Init", Init);
        L.RegFunction("LoadInt", LoadInt);
        L.RegFunction("LoadString", LoadString);
        L.RegFunction("AnimSazhi", AnimSazhi);
        L.RegFunction("SaveInt", SaveInt);
        L.RegFunction("SaveString", SaveString);
        L.RegFunction("ChangeMusicValue", ChangeMusicValue);
        L.RegFunction("PlayMusic", PlayMusic);
        L.RegFunction("PauseMusic", PauseMusic);
        L.RegFunction("StopMusic", StopMusic);
        L.RegFunction("PlaySound", PlaySound);
        L.RegFunction("PauseAllSound", PauseAllSound);
        L.RegFunction("WXLogin", WXLogin);
        L.RegFunction("CallFun", CallFun);
        L.RegFunction("ShareShot", ShareShot);
        L.RegFunction("LoginSpeech", LoginSpeech);
        L.RegFunction("PlaySpeech", PlaySpeech);
        L.RegFunction("StartSpeech", StartSpeech);
        L.RegFunction("StopSpeech", StopSpeech);
        L.RegFunction("Clear3D", Clear3D);
        L.RegFunction("Create3DEx", Create3DEx);
        L.RegFunction("Create3D", Create3D);
        L.RegFunction("Create2Dimage", Create2Dimage);
        L.RegFunction("Set2DImage", Set2DImage);
        L.RegFunction("FindObj", FindObj);
        L.RegFunction("SetPai", SetPai);
        L.RegFunction("AddAngles", AddAngles);
        L.RegFunction("DoKill", DoKill);
        L.RegFunction("DoMove", DoMove);
        L.RegFunction("DoMove2", DoMove2);
        L.RegFunction("DoJump", DoJump);
        L.RegFunction("DoRotate", DoRotate);
        L.RegFunction("DoRotateAdd", DoRotateAdd);
        L.RegFunction("DoCameraNear", DoCameraNear);
        L.RegFunction("PlayAnim", PlayAnim);
        L.RegFunction("PlayAnimIdle", PlayAnimIdle);
        L.RegFunction("AnimSazhi3D", AnimSazhi3D);
        L.RegFunction("SetColor", SetColor);
        L.RegFunction("CheckVer", CheckVer);
        L.RegFunction("BeginDown", BeginDown);
        L.RegFunction("WriteDown", WriteDown);
        L.RegFunction("EndDown", EndDown);
        L.RegFunction("ResetLoad", ResetLoad);
        L.RegFunction("UnloadRes", UnloadRes);
        L.RegFunction("EnableChildN", EnableChildN);
        L.RegFunction("GetPlatform", GetPlatform);
        L.RegFunction("GetNode", GetNode);
        L.RegFunction("SetGridLayoutGroup", SetGridLayoutGroup);
        L.EndStaticLibs();
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Init(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            GameAPI.Init();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LoadInt(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            string arg0 = ToLua.CheckString(L, 1);
            int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
            int o = GameAPI.LoadInt(arg0, arg1);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LoadString(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            string arg0 = ToLua.CheckString(L, 1);
            string arg1 = ToLua.CheckString(L, 2);
            string o = GameAPI.LoadString(arg0, arg1);
            LuaDLL.lua_pushstring(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int AnimSazhi(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
            int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
            GameAPI.AnimSazhi(arg0, arg1);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SaveInt(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            string arg0 = ToLua.CheckString(L, 1);
            int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
            GameAPI.SaveInt(arg0, arg1);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SaveString(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            string arg0 = ToLua.CheckString(L, 1);
            string arg1 = ToLua.CheckString(L, 2);
            GameAPI.SaveString(arg0, arg1);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int ChangeMusicValue(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
            GameAPI.ChangeMusicValue(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int PlayMusic(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            string arg0 = ToLua.CheckString(L, 1);
            int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
            GameAPI.PlayMusic(arg0, arg1);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int PauseMusic(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            GameAPI.PauseMusic();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int StopMusic(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            GameAPI.StopMusic();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int PlaySound(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.AudioClip)))
            {
                UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 1);
                GameAPI.PlaySound(arg0);
                return 0;
            }
            else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(int)))
            {
                string arg0 = ToLua.ToString(L, 1);
                int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
                GameAPI.PlaySound(arg0, arg1);
                return 0;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: GameAPI.PlaySound");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int PauseAllSound(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
            GameAPI.PauseAllSound(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int WXLogin(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            string arg0 = ToLua.CheckString(L, 1);
            GameAPI.WXLogin(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CallFun(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            string arg0 = ToLua.CheckString(L, 1);
            GameAPI.CallFun(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int ShareShot(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            string arg0 = ToLua.CheckString(L, 1);
            GameAPI.ShareShot(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LoginSpeech(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
            string arg1 = ToLua.CheckString(L, 2);
            string arg2 = ToLua.CheckString(L, 3);
            GameAPI.LoginSpeech(arg0, arg1, arg2);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int PlaySpeech(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            string arg0 = ToLua.CheckString(L, 1);
            GameAPI.PlaySpeech(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int StartSpeech(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
            float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
            GameAPI.StartSpeech(arg0, arg1);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int StopSpeech(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            GameAPI.StopSpeech();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Clear3D(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            GameAPI.Clear3D();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Create3DEx(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            string arg0 = ToLua.CheckString(L, 1);
            UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
            UnityEngine.GameObject o = GameAPI.Create3DEx(arg0, arg1);
            ToLua.Push(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Create3D(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
            {
                string arg0 = ToLua.ToString(L, 1);
                UnityEngine.GameObject o = GameAPI.Create3D(arg0);
                ToLua.Push(L, o);
                return 1;
            }
            else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(UnityEngine.Vector3)))
            {
                string arg0 = ToLua.ToString(L, 1);
                UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
                UnityEngine.GameObject o = GameAPI.Create3D(arg0, arg1);
                ToLua.Push(L, o);
                return 1;
            }
            else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)))
            {
                string arg0 = ToLua.ToString(L, 1);
                UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
                UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
                UnityEngine.GameObject o = GameAPI.Create3D(arg0, arg1, arg2);
                ToLua.Push(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: GameAPI.Create3D");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Create2Dimage(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            string arg0 = ToLua.CheckString(L, 1);
            UnityEngine.GameObject o = GameAPI.Create2Dimage(arg0);
            ToLua.Push(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Set2DImage(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Transform));
            string arg1 = ToLua.CheckString(L, 2);
            UnityEngine.GameObject o = GameAPI.Set2DImage(arg0, arg1);
            ToLua.Push(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int FindObj(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
            {
                string arg0 = ToLua.ToString(L, 1);
                UnityEngine.GameObject o = GameAPI.FindObj(arg0);
                ToLua.Push(L, o);
                return 1;
            }
            else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.GameObject), typeof(string)))
            {
                UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 1);
                string arg1 = ToLua.ToString(L, 2);
                UnityEngine.GameObject o = GameAPI.FindObj(arg0, arg1);
                ToLua.Push(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: GameAPI.FindObj");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SetPai(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
            int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
            GameAPI.SetPai(arg0, arg1, arg2);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int AddAngles(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
            GameAPI.AddAngles(arg0, arg1);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int DoKill(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            GameAPI.DoKill(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int DoMove(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
            UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
            GameAPI.DoMove(arg0, arg1, arg2);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int DoMove2(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
            UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
            GameAPI.DoMove2(arg0, arg1, arg2);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int DoJump(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 4);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
            UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
            float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
            GameAPI.DoJump(arg0, arg1, arg2, arg3);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int DoRotate(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
            UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
            GameAPI.DoRotate(arg0, arg1, arg2);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int DoRotateAdd(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
            UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
            GameAPI.DoRotateAdd(arg0, arg1, arg2);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int DoCameraNear(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
            float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
            float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
            GameAPI.DoCameraNear(arg0, arg1, arg2);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int PlayAnim(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            string arg1 = ToLua.CheckString(L, 2);
            GameAPI.PlayAnim(arg0, arg1);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int PlayAnimIdle(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            string arg1 = ToLua.CheckString(L, 2);
            GameAPI.PlayAnimIdle(arg0, arg1);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int AnimSazhi3D(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
            int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
            GameAPI.AnimSazhi3D(arg0, arg1, arg2);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SetColor(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 4);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 2);
            byte arg2 = (byte)LuaDLL.luaL_checknumber(L, 3);
            byte arg3 = (byte)LuaDLL.luaL_checknumber(L, 4);
            GameAPI.SetColor(arg0, arg1, arg2, arg3);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CheckVer(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            int[] arg0 = ToLua.CheckNumberArray<int>(L, 1);
            bool o = GameAPI.CheckVer(arg0);
            LuaDLL.lua_pushboolean(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int BeginDown(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
            int o = GameAPI.BeginDown(arg0);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int WriteDown(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
            GameAPI.WriteDown(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int EndDown(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            GameAPI.EndDown();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int ResetLoad(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            GameAPI.ResetLoad();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int UnloadRes(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            GameAPI.UnloadRes();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int EnableChildN(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
            int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
            GameAPI.EnableChildN(arg0, arg1);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPlatform(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            int o = GameAPI.GetPlatform();
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetNode(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Transform));
            string arg1 = ToLua.CheckString(L, 2);
            UnityEngine.Transform o = GameAPI.GetNode(arg0, arg1);
            ToLua.Push(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SetGridLayoutGroup(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Transform));
            int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
            UnityEngine.Transform o = GameAPI.SetGridLayoutGroup(arg0, arg1);
            ToLua.Push(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }
}

